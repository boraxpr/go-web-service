// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/quotation": {
            "get": {
                "description": "Returns all quotations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all quotations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.Quotation"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.Quotation": {
            "type": "object",
            "properties": {
                "attachment": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "createdDate": {
                    "$ref": "#/definitions/sql.NullTime"
                },
                "creditDay": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "currency": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "customerID": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "customerName": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "docNum": {
                    "type": "integer"
                },
                "dueDate": {
                    "$ref": "#/definitions/sql.NullTime"
                },
                "grandTotal": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "isActive": {
                    "$ref": "#/definitions/sql.NullBool"
                },
                "note": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "projectName": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "remark": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "running": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "status": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "updatedAt": {
                    "$ref": "#/definitions/sql.NullTime"
                },
                "updatedBy": {
                    "$ref": "#/definitions/sql.NullString"
                }
            }
        },
        "sql.NullBool": {
            "type": "object",
            "properties": {
                "bool": {
                    "type": "boolean"
                },
                "valid": {
                    "description": "Valid is true if Bool is not NULL",
                    "type": "boolean"
                }
            }
        },
        "sql.NullFloat64": {
            "type": "object",
            "properties": {
                "float64": {
                    "type": "number"
                },
                "valid": {
                    "description": "Valid is true if Float64 is not NULL",
                    "type": "boolean"
                }
            }
        },
        "sql.NullInt64": {
            "type": "object",
            "properties": {
                "int64": {
                    "type": "integer"
                },
                "valid": {
                    "description": "Valid is true if Int64 is not NULL",
                    "type": "boolean"
                }
            }
        },
        "sql.NullString": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        },
        "sql.NullTime": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Go Web Service API",
	Description:      "This is a sample server for a Go web service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
